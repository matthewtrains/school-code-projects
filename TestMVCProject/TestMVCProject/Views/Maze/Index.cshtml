@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <style>
        * {
            padding: 0;
            margin: 0;
        }

        body {
            text-align: center;
        }
    </style>

    <!╌ My primary stylesheet ╌>
    <link rel="stylesheet" href="../Content/MazeGame.css">
</head>

<body>
    <ul class="options">
        <li class="button" id="new_maze">new maze</li>
        <li class="button" id="reset_game">reset game</li>
        <li class="button" id="find_path">find path</li>
    </ul>

    <!╌ https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API ╌>
    <canvas id="canvas"></canvas>

    <script src="../scripts/MazeGenerator.js"></script>
    <!╌ TODO -- No idea if MazeSolver.v7 is any good, need to investigate╌>
    <script src="../scripts/MazeSolver.v7.js"></script>
    <!╌ TODO -- Add my additional MazeSolver.js functions here ex: MazeSolver.DFS.js, MazeSolver.BFS.js, etc.╌>

    <script>
        //https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementById
        let canvas = document.getElementById('canvas')

        //https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext
        let context = canvas.getContext('2d')

        let borderWidth = Math.min(window.innerWidth, window.innerHeight - canvas.offsetTop - 10)
        borderWidth = Math.max(borderWidth, 400)

        canvas.width = borderWidth
        canvas.height = borderWidth

        let mazeWidth = 51  //Original was 51, simplified to 11 as I try to understand this code...

        //Maze will be square, height and width match value given above
        let mazeArray = new MazeGenerator(mazeWidth, mazeWidth).generate()

        let roadWidth = borderWidth / mazeArray[0].length
        let roadHeight = borderWidth / mazeArray.length

        //Render maze of a given size
        function renderMaze(context, mazeArray) {
            for (let i = 0; i < mazeArray.length; i++) {
                for (let j = 0; j < mazeArray[i].length; j++) {
                    //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath
                    context.beginPath()

                    context.rect(j * roadWidth, i * roadHeight, roadWidth, roadHeight)

                    context.fillStyle = mazeArray[i][j] === 0 ? 'white' : '#3581fc'
                    //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill
                    context.fill()

                    //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath
                    context.closePath()
                }
            }
        }

        renderMaze(context, mazeArray)
    </script>

    <script>
        function drawPath(context, path) {
            path.forEach(position => {
                //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/beginPath
                context.beginPath()

                context.rect(position.x * roadWidth, position.y * roadHeight, roadWidth, roadHeight)

                context.fillStyle = 'yellow'
                //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill
                context.fill()

                //https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/closePath
                context.closePath()
            })
        }
    </script>
    <script>
        let defaultPlayerPosition = { x: 0, y: 1 }
        let playerPosition = defaultPlayerPosition

        function renderPoint(position) {
            context.beginPath()

            context.arc(position.x * roadWidth + 0.5 * roadWidth,
                position.y * roadHeight + 0.5 * roadHeight,
                roadWidth * 0.5, 0, Math.PI * 2)

            context.fillStyle = 'black'
            context.fill()

            context.closePath()
        }

        function clearPoint(position) {
            context.clearRect(position.x * roadWidth, position.y * roadWidth, roadWidth, roadWidth)
        }

        //OnClick handler to my "New Maze" button
        document.getElementById('new_maze').onclick = function () {
            mazeArray = new MazeGenerator(mazeWidth, mazeWidth).generate()
            renderMaze(context, mazeArray)

            playerPosition = defaultPlayerPosition
            renderPoint(playerPosition)
        }

        //OnClick handler to my "Reset Game" button
        document.getElementById('reset_game').onclick = function () {
            renderMaze(context, mazeArray)

            playerPosition = defaultPlayerPosition
            renderPoint(playerPosition)
        }

        //OnClick handler to my "Find Path" button
        document.getElementById('find_path').onclick = function () {
            let mazeSolver = new MazeSolver(mazeArray)
            let path = mazeSolver.solveMaze()
            drawPath(context, path)
        }
    </script>

    <script>
        renderPoint(playerPosition)

        function isLegalRoad(mazeArray, position) {
            if (position.x < 0 || position.x >= mazeArray[0].length) {
                return false
            }

            if (position.y < 0 || position.y >= mazeArray.length) {
                return false
            }

            if (mazeArray[position.y][position.x] === 1) {
                return false
            }

            return true
        }

        //These handlers are for pressing the arrow keys and manually navigating the maze as a human
        window.onkeydown = function (event) {
            console.log(event)
            let newPlayerPosition = null
            switch (event.code) {
                case 'ArrowRight':
                    newPlayerPosition = {
                        x: playerPosition.x + 1,
                        y: playerPosition.y
                    }
                    break
                case 'ArrowLeft':
                    newPlayerPosition = {
                        x: playerPosition.x - 1,
                        y: playerPosition.y
                    }
                    break
                case 'ArrowUp':
                    newPlayerPosition = {
                        x: playerPosition.x,
                        y: playerPosition.y - 1
                    }
                    break
                case 'ArrowDown':
                    newPlayerPosition = {
                        x: playerPosition.x,
                        y: playerPosition.y + 1
                    }
                    break
                default:
                    console.log('illegal ket')
                    return
            }

            //Human has solved the end of the maze
            if (newPlayerPosition.x == mazeArray[0].length - 1 && newPlayerPosition.y == mazeArray.length - 2) {
                alert('you pass')
            }

            if (isLegalRoad(mazeArray, newPlayerPosition)) {
                clearPoint(playerPosition)
                playerPosition = newPlayerPosition
                renderPoint(playerPosition)
            }

        }
    </script>
</body>
</html>

